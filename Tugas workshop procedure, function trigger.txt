Stored Procedures, Stored Functions dan Trigger
Worksheet 6


Nama	: Muhammad Fadilah

SOAL 6.1
1.	Buatlah Procedure untuk mengupdate harga_jual berdasarkan jenis produk tertentu (jenis_produk_id), beri nama procedure pro_naikan_harga memiliki parameter yang akan menerima argumen: Jenis Produk ID dan Persentase kenaikan harga.
DELIMITER $$
CREATE PROCEDURE pro_naik(
    -> IN jenis_produk INT,
    -> IN persentasi_kenaikan INT )
    -> BEGIN
    -> UPDATE produk SET harga_jual = harga_jual + (harga_jual * persentasi_kenaikan / 100)
    -> WHERE jenis_produk_id = jenis_produk;
    -> END $$
DELIMITER ;
CALL pro_naik(1,4); 
+----+-------------------+------------+
| id | nama              | harga_jual |
+----+-------------------+------------+
|  1 | Televisi 21 inchs |   52520000 |
|  2 | Televisi 40 inch  |    7737600 |
|  3 | Kulkas 2 pintu    |    4867200 |
|  4 | Meja Makan        |     600000 |
|  5 | Teh Kotak         |       3850 |
|  6 | PC Desktop HP     |    9984000 |
|  7 | Teh Botol         |       2750 |
|  8 | Notebook Acer S   |   11232000 |
|  9 | Notebook Lenovo   |   12480000 |
| 11 | Laptop Lenovo     |   16640000 |
| 15 | Kopi              |      33000 |
| 16 | Teh Sosro 2       |      15600 |
| 18 | Laptop Asus       |    5200000 |
| 19 | Televisi 22 inc`  |   52520000 |
| 20 | Televisi 23 inc   |   52520000 |
| 21 | Televisi 24 inc   |   52520000 |
| 22 | Televisi 25 inc   |   52520000 |
| 24 | Televisi 27 inc   |   52520000 |
| 25 | Televisi 28 inc   |   52520000 |
| 26 | Televisi 29 inc   |   52520000 |
| 27 | Teh Pucuk         |       5500 |
| 28 | Teh Pucuk2        |       5500 |
+----+-------------------+------------+

2.	Buat fungsi umur dengan parameter yang menerima inputan argumen tipe data date dan mengembalikan hasil perhitungan umur (tahun sekarang dikurang tahun inputan) dengan tipe data bilangan bulat (integer) positif.
DELIMITER $$
CREATE FUNCTION umur(tgl_lahir DATE)
    -> RETURNS INT
    -> BEGIN
    -> DECLARE umur INT;
    -> SET umur = YEAR(CURDATE()) - YEAR(tgl_lahir);
    -> RETURN umur;
    -> END $$
DELIMITER ;
SELECT nama, umur(tgl_lahir) AS umur FROM pelanggan;
+--------------------+------+
| nama               | umur |
+--------------------+------+
| Agung Sedayu Group |   14 |
| Pandan Wangi       |   74 |
| Sekar Mirah        |   41 |
| Swandaru Geni      |   43 |
| Pradabashu         |   39 |
| Gayatri Dwi        |   37 |
| Dewi Gyat          |   36 |
| Andre Haru         |   34 |
| Ahmad Hasan        |   32 |
| Cassanndra         |   34 |
| Andi Wijaya        |    1 |
| Ira                |    1 |
+--------------------+------+

3.	Buat fungsi kategori_harga dengan parameter yang menerima inputan argument tipe data double dan mengembalikan tipe data string kategori harga berdasarkan: 
●	0 – 500rb : murah
●	500rb – 3 juta : sedang
●	3jt – 10 juta : mahal 
●	> 10 juta : sangat mahal
DELIMITER $$
CREATE FUNCTION kategori_harga(harga_jual DOUBLE)
    -> RETURNS VARCHAR(20)
    -> BEGIN
    ->     DECLARE kategori VARCHAR(20);
    ->     IF harga_jual >= 0 AND harga_jual <= 500000 THEN
    ->         SET kategori = 'murah';
    ->     ELSEIF harga_jual > 500000 AND harga_jual <= 3000000 THEN
    ->         SET kategori = 'sedang';
    ->     ELSEIF harga_jual > 3000000 AND harga_jual <= 10000000 THEN
    ->         SET kategori = 'mahal';
    ->     ELSE
    ->         SET kategori = 'sangat mahal';
    ->     END IF;
    ->     RETURN kategori;
    -> END $$
DELIMITER ;
SELECT nama, harga_jual, kategori_harga(harga_jual) AS kategori_harga from produk;
+-------------------+------------+----------------+
| nama              | harga_jual | kategori_harga |
+-------------------+------------+----------------+
| Televisi 21 inchs |   50500000 | sangat mahal   |
| Televisi 40 inch  |    7440000 | mahal          |
| Kulkas 2 pintu    |    4680000 | mahal          |
| Meja Makan        |     600000 | sedang         |
| Teh Kotak         |       3850 | murah          |
| PC Desktop HP     |    9984000 | mahal          |
| Teh Botol         |       2750 | murah          |
| Notebook Acer S   |   11232000 | sangat mahal   |
| Notebook Lenovo   |   12480000 | sangat mahal   |
| Laptop Lenovo     |   16000000 | sangat mahal   |
| Kopi              |      33000 | murah          |
| Teh Sosro 2       |      15000 | murah          |
| Laptop Asus       |    5000000 | mahal          |
| Televisi 22 inc`  |   50500000 | sangat mahal   |
| Televisi 23 inc   |   50500000 | sangat mahal   |
| Televisi 24 inc   |   50500000 | sangat mahal   |
| Televisi 25 inc   |   50500000 | sangat mahal   |
| Televisi 27 inc   |   50500000 | sangat mahal   |
| Televisi 28 inc   |   50500000 | sangat mahal   |
| Televisi 29 inc   |   50500000 | sangat mahal   |
| Teh Pucuk         |       5500 | murah          |
| Teh Pucuk2        |       5500 | murah          |
+-------------------+------------+----------------+



Soal 6.2
1.	Buatlah bisnis proses pembayaran dengan menggunakan trigers, dengan skenario sebagai berikut :
- pelanggan memesan didalam table pesanan 
- dilanjutkan dengan proses pembayaran di table pembayaran
- didalam table pembayaran tambahkan kolom status_pembayaran
- jika pesanan sudah dibayar maka status pembayaran akan berubah menjadi lunas 
1. Pelanggan memesan didalam table pesanan
SELECT * FROM pesanan;
Didalam table pembayaran tambahkan kolom status_pembayaran
ALTER TABLE pembayaran ADD status_pembayaran varchar(25);
2. Dilanjutkan dengan proses pembayaran di table pembayaran
DELIMITER $$
MariaDB [dbpos_sib6]> CREATE TRIGGER cek_pembayaran BEFORE INSERT ON pembayaran
    -> FOR EACH ROW
    -> BEGIN
    -> DECLARE total_bayar DECIMAL(10, 2);
    -> DECLARE total_pesanan DECIMAL(10, 2);
    -> SELECT SUM(jumlah) INTO total_bayar FROM pembayaran WHERE pesanan_id = NEW.pesanan_id;
    -> SELECT total INTO total_pesanan FROM pesanan WHERE id = NEW.pesanan_id;
    -> IF total_bayar + NEW.jumlah >= total_pesanan THEN
    -> SET NEW.status_pembayaran = 'Lunas';
    -> END IF;
    -> END $$
DELIMITER ;

2.	Buatlah Stored Procedure dengan nama kurangi_stok untuk mengurangi stok produk. Stok berkurang sesuai dengan jumlah pesanan produk.
DELIMITER $$
CREATE PROCEDURE kurangi_stok(IN produk_id INT, IN jumlah_pesanan INT)
BEGIN
  DECLARE stok_produk INT;
  SELECT stok INTO stok_produk FROM produk WHERE id = produk_id;
  SET stok_produk = stok_produk - jumlah_pesanan;
  IF stok_produk < 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Stok produk tidak mencukupi';
  END IF;
  UPDATE produk SET stok = stok_produk WHERE id = produk_id;
END $$
DELIMITER ;

3.	Buatlah Trigger dengan nama trig_kurangi_stok yang akan mengurangi stok produk jika terjadi transaksi pesanan oleh pelanggan (memanggil stored procedure kurangi_stok soal no 1).
Trigger ini aktif setelah trigger after_pesanan_items_insert (trigger pada contoh 3).
DELIMITER $$
CREATE TRIGGER trig_kurangi_stok AFTER INSERT ON pesanan_items
FOR EACH ROW
BEGIN
CALL kurangi_stok(NEW.produk_id, NEW.qty);
END $$
DELIMITER ;
SELECT * FROM produk;
INSERT INTO pesanan_items (produk_id, pesanan_id, qty, harga) VALUES (7, 3, 2, 7000);
SELECT * FROM produk
